@if (!_loading)
{
    <div id="home-carousel" class="carousel slide" data-ride="carousel">
        <div class="carousel-inner inner">
            @for (int i = 0; i < _model.JoinList.Count; i++)
            {
                var image = _model.JoinList[i];
                <div class="@(i == 0 ? "carousel-item active" : "carousel-item")" data-interval="@_cycleInterval">
                    <div class="row mt-3">
                        <div class="col-md-8">
                            <img src="@image.Url" width="500" style="display: inline-block; margin: auto;" alt="carousel image">
                            <h3 class="text-center text-white mt-2"><strong>@image.DisplayTitle</strong></h3>
                        </div>
                        <div class="col-md-4 carousel-info text-right">
                            <ul class="carousel-list text-left pl-10">
                                <li>Created: @image.CreateDate</li>
                                <li>Designer: @image.DisplayName</li>
                                <li>Total Upvotes: @image.Ratings</li>
                            </ul>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IndexViewModel _model = new IndexViewModel();

    private const int _cycleInterval = 2000; //ms
    private string _baseImagePath;
    private bool _loading = true;
    private List<Project> _projects;

    protected override async Task OnInitializedAsync()
    {
        _baseImagePath = COLOR.BASE_IMAGE_URL;
        _model.ProjectList = new List<Project>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _model.AccountList = await DB.GetAccountListAsync();
            _model.ImageList = await DB.GetCarouselImagesListAsync();
            foreach (var image in _model.ImageList)
            {
                _model.ProjectList.Add(await DB.GetProjectAsync(image.ProjectId));
            }
            _model.JoinImagesAndProjects();
            foreach (var item in _model.JoinList)
            {
                item.Ratings = await DB.GetRatingCountByItemId(item.ImageId);
            }
            _loading = false;
            StateHasChanged();
            await JS.InvokeAsync<object>("homeCarousel", _cycleInterval); // call javascript methods in components after initalization
        }
    }
}